Vagrant.configure("2") do |config|
  config.vm.box = "bento/rockylinux-8"
  # Disk 확장설정 추가
  # VirtualBox에서만 동작하는 설정이므로 Hyper-V에서는 제외
  if Vagrant.has_plugin?("vagrant-disksize")
    config.disksize.size = "50GB"
  end

  config.vm.provider "hyperv" do |h|
    h.memory = 8192  # RAM 크기 (MB) - 8GB
    h.cpus = 4       # CPU 개수
    h.vmname = "rocky-k8s-master" # VM 이름 설정

    # Hyper-V는 동적 메모리 설정을 강제하지 않도록 함
    h.maxmemory = 8192  # 최대 메모리를 최소 메모리와 동일하게 설정 (고정)
end

# 호스트네임 설정
config.vm.hostname = "rocky-k8s-master"

# 네트워크 설정
config.vm.network "private_network", bridge: "outSwitch01", ip: "192.168.35.60"

# **SMB 공유 폴더 비활성화**
config.vm.synced_folder ".", "/vagrant", disabled: true

# 프로비저닝 스크립트 (root 암호 설정 포함)
config.vm.provision "shell", inline: <<-SHELL
echo "root:vagrant" | sudo chpasswd
sudo dnf update -y
sudo dnf upgrade -y

# 활성화된 네트워크 인터페이스 이름 자동 감지
INTERFACE=$(nmcli -t -f DEVICE con show --active | head -n 1)

# 인터페이스가 감지되지 않았을 경우 기본값 eth0 사용
if [ -z "$INTERFACE" ]; then
   INTERFACE="eth0"
fi

# 네트워크 설정 적용
sudo nmcli connection modify "$INTERFACE" ipv4.addresses 192.168.35.60/24 ipv4.gateway 192.168.35.1 ipv4.dns "8.8.8.8 8.8.4.4" ipv4.method manual
sudo nmcli connection up "$INTERFACE"

echo '======== [4] Rocky Linux 기본 설정 ========' 
timedatectl set-timezone Asia/Seoul
timedatectl set-ntp true

yum install -y cloud-utils-growpart

#파티션 크기 확장
#growpart /dev/sda 4
#파일 시스템 크기 확장
#xfs_growfs /dev/sda4

yum install -y yum-utils iproute-tc

# 호스트네임 설정
sudo hostnamectl set-hostname rocky-k8s-master

cat << EOF >> /etc/hosts
192.168.35.60 rocky-k8s-master
EOF

systemctl stop firewalld && systemctl disable firewalld
swapoff -a && sed -i '/ swap / s/^/#/' /etc/fstab

echo '======== [6] 컨테이너 런타임 설치 ========' 
cat <<EOF |tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

modprobe overlay
modprobe br_netfilter

cat <<EOF |tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sysctl --system

yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum install -y containerd.io-1.6.21-3.1.el8
systemctl daemon-reload
systemctl enable --now containerd

containerd config default > /etc/containerd/config.toml
sed -i 's/ SystemdCgroup = false/ SystemdCgroup = true/' /etc/containerd/config.toml
systemctl restart containerd

echo '======== [7] kubeadm 설치 ========' 
#    cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
#    [kubernetes]
#    name=Kubernetes
#    baseurl=https://pkgs.k8s.io/core:/stable:/v1.27/rpm/
#    enabled=1
#    gpgcheck=1
#    gpgkey=https://pkgs.k8s.io/core:/stable:/v1.27/rpm/repodata/repomd.xml.key
#    exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
#EOF

cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.27/rpm/
enabled=1
gpgcheck=1
repo_gpgcheck=0
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.27/rpm/repodata/repomd.xml.key
EOF


# DNF 캐시 정리 후 패키지 설치 (중복?  어쨋든 실패)
#sudo dnf clean all
#sudo dnf makecache
#sudo dnf install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

setenforce 0
sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

yum install -y kubelet-1.27.2-150500.1.1.x86_64 kubeadm-1.27.2-150500.1.1.x86_64 kubectl-1.27.2-150500.1.1.x86_64 --disableexcludes=kubernetes
systemctl enable --now kubelet

echo '======== [8] kubeadm으로 클러스터 생성  ========'
kubeadm init --pod-network-cidr=20.96.0.0/16 --apiserver-advertise-address 192.168.35.60

mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config

kubectl create -f  https://raw.githubusercontent.com/k8s-1pro/install/main/ground/k8s-1.27/calico-3.26.4/calico.yaml
kubectl create -f https://raw.githubusercontent.com/k8s-1pro/install/main/ground/k8s-1.27/calico-3.26.4/calico-custom.yaml
kubectl taint nodes rocky-k8s-master node-role.kubernetes.io/control-plane-

echo "source <(kubectl completion bash)" >> ~/.bashrc
echo 'alias k=kubectl' >>~/.bashrc
echo 'complete -o default -F __start_kubectl k' >>~/.bashrc

kubectl create -f  https://raw.githubusercontent.com/k8s-1pro/install/main/ground/k8s-1.27/dashboard-2.7.0/dashboard.yaml
kubectl create -f https://raw.githubusercontent.com/k8s-1pro/install/main/ground/k8s-1.27/metrics-server-0.6.3/metrics-server.yaml
  SHELL
end
